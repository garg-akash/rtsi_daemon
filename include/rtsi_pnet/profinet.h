#ifndef __PROFINET_H__
#define __PROFINET_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "p-net/pnet.h"

typedef enum { PNET_STATE_STOP, PNET_STATE_RUN, PNET_STATE_CONNECT, PNET_STATE_ERROR, PNET_STATE_START } PNET_STATE;

typedef enum {
    PNET_MODULE_STATE = PNSTATION_MODULE_STATE,
    PNET_MODULE_IO = PNSTATION_MODULE_IO,
    PNET_MODULE_JOINTS = PNSTATION_MODULE_JOINTS,
    PNET_MODULE_TCP = PNSTATION_MODULE_TCP,
    PNET_MODULE_BIT = PNSTATION_MODULE_BIT,
    PNET_MODULE_INT = PNSTATION_MODULE_INT,
    PNET_MODULE_FLOAT = PNSTATION_MODULE_FLOAT,
    PNET_MODULE_O_IO = PNSTATION_MODULE_O_IO,
    PNET_MODULE_O_REG1 = PNSTATION_MODULE_O_REG1,
    PNET_MODULE_O_REG2 = PNSTATION_MODULE_O_REG2,
    PNET_MODULE_INDEX_MAX = PNSTATION_MODULE_INDEX_MAX,
} PNET_MODULE;

typedef enum {
    PNET_LOSE_MODULE_ACTION_IGNORE,
    PNET_LOSE_MODULE_ACTION_PAUSE,
    PNET_LOSE_MODULE_ACTION_STOP
} PNET_LOSE_MODULE_ACTION;

PNET_STATE eli_pnet_current_state();

PNET_LOSE_MODULE_ACTION eli_pnet_lose_module_action(PNET_MODULE module);

bool eli_pnet_is_module_plug(PNET_MODULE module);

void eli_pnet_set_lose_module_act(PNET_MODULE module, PNET_LOSE_MODULE_ACTION act);

void eli_pnet_pause();

void eli_pnet_start(const char *station_name);

#ifdef __cplusplus
}
#endif

#endif